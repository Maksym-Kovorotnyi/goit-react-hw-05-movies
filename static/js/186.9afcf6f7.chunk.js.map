{"version":3,"file":"static/js/186.9afcf6f7.chunk.js","mappings":"uTAGMA,EAAS,mCACfC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,6GAEGD,EAAAA,EAAAA,IAAA,qCAAwCD,IAF3C,cAEbG,EAFa,yBAGZA,EAAQC,KAAKC,SAHD,iCAMpBC,EAAAA,EAAAA,IAAM,oBANc,yDAAH,qDAUXC,EAAU,mCAAG,WAAOC,GAAP,gGAEIP,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,kBAAkDQ,IAFtD,cAEZL,EAFY,yBAGXA,EAAQC,KAAKC,SAHF,iCAKnBC,EAAAA,EAAAA,IAAM,oBALa,yDAAH,sDASVG,EAAgB,mCAAG,WAAOC,GAAP,gGAEFT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,oBAAiCV,IAF/B,cAElBG,EAFkB,yBAGjBA,EAAQC,MAHS,iCAKzBE,EAAAA,EAAAA,IAAM,oBALmB,yDAAH,sDAShBK,EAAO,mCAAG,WAAOD,GAAP,gGAEOT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA0CV,IAFjD,cAETG,EAFS,yBAGRA,EAAQC,KAAKQ,MAHL,wFAAH,sDASPC,EAAU,mCAAG,WAAOH,GAAP,gGAEKT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA0CV,IAF/C,cAEZc,EAFY,yBAGXA,EAASV,KAAKC,SAHH,iCAKnBC,EAAAA,EAAAA,IAAM,oBALa,yDAAH,qD,wGCDvB,UAtCiB,WACd,OAA4BS,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAAXD,QAkBL,OAfAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,mCAAG,8GAEHR,EAAAA,EAAAA,IAAWK,GAFR,OAEhBd,EAFgB,OAGtBa,EAAUb,GAHY,gDAKhBkB,QAAQC,IAAI,SALI,yDAAH,qDASpBF,GACF,GAAE,CAACH,KAKJ,8BACGF,IACC,wBACGA,EAAOQ,KAAI,gBAAGd,EAAH,EAAGA,GAAIe,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,0BACE,mCADF,IACkBD,MAElB,uBAAIC,MAJGhB,EADC,OAYrB,C","sources":["Service/API.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nconst MY_KEY = \"5d690f0bfcc9395ff58e80bfc32ac0d9\"\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async () => {\n    try {\n        const promise = await axios.get(`trending/movie/day?api_key=${MY_KEY}`)\n        return promise.data.results;\n        \n    } catch (error) {\n       toast('Movies not found')\n    }\n}\n\nexport const getByQuery = async (query) => {\n    try {\n        const promise = await axios.get(`search/movie?api_key=${MY_KEY}&query=${query}`)\n        return promise.data.results;\n    } catch (error) {\n       toast('Movies not found') \n    }\n}\n\nexport const getMovieFullInfo = async (id)=> {\n    try {\n        const promise = await axios.get(`movie/${id}?api_key=${MY_KEY}`)\n        return promise.data\n    } catch (error) {\n       toast('Movies not found')  \n    }\n}\n\nexport const getCast = async (id) => {\n    try {\n        const promise = await axios.get(`/movie/${id}/credits?api_key=${MY_KEY}`)\n        return promise.data.cast;\n    } catch (error) {\n         \n    }\n}\n\nexport const getReviews = async (id) => {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews?api_key=${MY_KEY}`);\n        return response.data.results;  \n    } catch (error) {\n       toast('Movies not found')  \n    }\n \n}\n","import { getReviews } from \"Service/API\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n const Reviews = () => {\n   const [Review, setReview] = useState(null);\n  const {movieId} = useParams();  \n    \n    \n    useEffect(() => {\n        const getREviewInfo = async () => {\n            try {\n        const data = await getReviews(movieId)\n        setReview(data)  \n            } catch (error) {\n              console.log('error');  \n            }\n             \n        }\n       getREviewInfo() \n    }, [movieId])\n    \n    \n  \n    return (\n    <>\n      {Review && (\n        <ul>\n          {Review.map(({ id, author, content }) => (\n            <li key={id}>\n              <p>\n                <b>Author:</b> {author}\n              </p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews"],"names":["MY_KEY","axios","getTrending","promise","data","results","toast","getByQuery","query","getMovieFullInfo","id","getCast","cast","getReviews","response","useState","Review","setReview","movieId","useParams","useEffect","getREviewInfo","console","log","map","author","content"],"sourceRoot":""}